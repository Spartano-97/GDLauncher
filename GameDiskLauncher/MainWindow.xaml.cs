using System.Text;
using System.Windows;
using System.Diagnostics;
using Newtonsoft.Json;
using System.IO;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Threading.Tasks;

namespace GameDiskLauncher
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LauncherConfig? config = LoadConfig();

            // Set the DataContext for the entire window.
            // The bindings in XAML (like {Binding Title}) will now use the properties of the 'config' object.
            if (config != null)
            {
                this.DataContext = config;
            }
        }

        private LauncherConfig? LoadConfig()
        {
            string configPath = Path.Combine(Directory.GetCurrentDirectory(), "Config.json");
            if (File.Exists(configPath))
            {
                try
                {
                    string json = File.ReadAllText(configPath);
                    return JsonConvert.DeserializeObject<LauncherConfig>(json);
                }
                catch (JsonException ex)
                {
                    MessageBox.Show($"Error reading Config.json: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return null;
                }
            }
            else
            {
                MessageBox.Show("Config.json not found. Launcher will exit.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return null;
            }
        }

        // This event is called by any button generated by the ItemsControl
        private async void LaunchButton_Click(object sender, RoutedEventArgs e)
        {
            // The full ButtonConfig object was stored in the button's Tag property
            if ((sender as Button)?.Tag is ButtonConfig btnConfig)
            {
                await HandleButtonClick(btnConfig);
            }
        }

        private async Task HandleButtonClick(ButtonConfig btnConfig)
        {
            // First, validate that the path from the config is not null or empty.
            if (string.IsNullOrEmpty(btnConfig.Path))
            {
                MessageBox.Show("Button has no path configured.", "Configuration Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return; // Exit the method if the path is invalid.
            }

            try
            {
                if (btnConfig.Type == "File")
                {
                    string path = btnConfig.Path;
                    // If the path is not absolute, combine it with the application's directory
                    if (!Path.IsPathRooted(path))
                    {
                        path = Path.Combine(Directory.GetCurrentDirectory(), path);
                    }

                    if (File.Exists(path))
                    {
                        Process.Start(new ProcessStartInfo(path) { UseShellExecute = true });

                        // Only shut down if the button's StyleType is "Primary"
                        if (btnConfig.StyleType == "Primary")
                        {
                            await Task.Delay(1500);
                            Application.Current.Shutdown();
                        }
                    }
                    else
                        MessageBox.Show($"File not found: {btnConfig.Path}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                else if (btnConfig.Type == "Website")
                {
                    Process.Start(new ProcessStartInfo(btnConfig.Path) { UseShellExecute = true });
                }
            }
            catch (Exception ex)
            {
                // Use the null-coalescing operator '??' to provide a fallback value
                // in case btnConfig.Text is null.
                string buttonIdentifier = btnConfig.Text ?? "the item";
                MessageBox.Show($"Failed to open {buttonIdentifier}: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // This event is for the dedicated Exit button
        private void ExitButton_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}